1. Genomes

- A genome (for our purposes) is a long string of A's, C's, G's, and T's
- Dual-stranded
	- A pairs with T and C pairs with G
- E. coli (a common bacterium): ~4,600,000 base pairs
- Ananas comosus (pineapple):	~500,000,000 base pairs
- Homo sapiens (human):			~3,000,000,000 base pairs

2. Genome sequencing

- How can we find the precise sequence (in terms of A's, T's, C's, and G's) of
  an organism's genome?

- Currently available sequencing technologies can only sequence fragments a few
  dozen to a few thousand bp long

- Genome assembly:
	Lab work:
		1. Obtain a DNA sample
		2. Break DNA into much smaller fragments
		3. Sequence the fragments using available technology
	Computational work:
		4. Given the sequenced fragments, reconstruct the original genome.

3. Reads

- A _read_ is a short sequence of the letters A, C, T, G that represents some
  DNA that was sequenced by the sequencing machine.
- A read may come from any location on the genome, from either strand.
- Reads from opposite strands go in opposite directions.
	- As a result, a sequence and its reverse-complement (the corresponding
	  sequence on the other strand, going backwards) are usually considered
	  equivalent.

4. Genome assemblers

Input:  A set of reads (lengths: ~35 to 5000bp each).
Output:  One strand of the reconstructed genome (if possible)--- but in general,
an exact answer may be impossible, so the output must be a set of substrings of
the original genome that are as long as possible. (lengths: ~10,000 to
10,000,000bp each).

5. Comparing genome assembly to Shortest Common Superstring

Genome assembly is superficially similar to the shortest common superstring
(SCS) problem, which is to find the shortest string that contains all strings
from a given set.

Venn diagram

Shortest Common Superstring				Both				Genome assembly

                                Given shorter strings,
                                put them together to
                                make a longer string.


Substrings are exact                                  Substrings (reads) may contain errors

NP-complete                                            Some models proven to be NP-complete

Substrings must appear exactly in superstring       Substrings (reads) may come
                                                        from either one of two strands

Superstring found must be shortest possible             The true genome may be longer
                                                        than the shortest
                                                        common superstring.

6. Ideas for genome assembly algorithms

- Use the reads to build a graph that models the assembly problem.
- Find paths through the graph to reconstruct the original sequence.

7. Overlaps between reads

- Two reads that overlap are likely to come from adjacent positions on the
  genome.

----------------->
       -------------------->

            =?=

--------------------------->

- Overlapped reads may be from different strands.  Note the different directions
  of the two reads here.  The overlapped regions of the two reads are
  reverse-complement from each other.

<------------------   
        ----------------------->

            =?=

------------------------------->

8. Computing overlaps between reads

- Compute all pairwise overlaps of some minimum length l among the reads.
- Naive algorithm compares every read with every other read.
- A faster algorithm indexes the reads by short subsequences, then only compares
  reads that share a subsequence ("seed-and-extend").

9. Build the fragment string assembly graph

- Use the overlaps as evidence to construct a graph modeling the assembly.
- Each vertex represents a read.
- Each edge represents an overlap.
- Two reads are connected with an edge if they share an overlap.
- Each edge is labeled with DNA sequence of the _non-overlapped region_ (this
  should become clearer later...).  This is why it's called a _string graph_

- Should the edges be directed or undirected?

10. Bidirected graphs

- At this stage, we don't actually know which strands the reads are from!

------------>            or             <------------
     <-------------             -------------->

- We must allow the edges to be traversed in either the forward or
  reverse-complement direction... but each read MUST be used in a consistent way
  in the reconstruction.

- A _bidirected graph_ is a graph where a directed head is attached to both
  edges.

- There are 3 (or 4, ignoring symmetry) types of bidirected edges.  They follow
  directly from the different types of overlaps.

     ------->   ------>      ------>     <------
  <-------         <-------     ------>     <------

      |               |           |          |
      V               V           V          V  

  <--------->   >---------<  >-------->  <--------<

- In this example, two vertices (reads) may have multiple _bidirected edges_
  between them if they overlap in different ways, but there can be at most one
  _bidirected edge of the same type_ between two vertices if we always prefer
  the best overlap of a given type.

11. Walking through the bidirected string graph

- A _walk on a bidirected graph_ is a continuous sequence of edges such that
  if we enter a vertex v through a head inwards, we leave it on a head outwords,
  and vice versa.

- A bidirected edge may be traversed in opposite directions.

- The reverse of a walk in a directed graph is also a bidirected walk.

    - Interpretation: one direction of the walk spells out the _forward_
      sequence.  The other direction spells out the _reverse complement_
      sequence.

12. Transitive reduction

- Very commonly, given three adjacent reads f, g, and h, f will overlap h as
  well as g.  This is redundant information because we can equivalently walk f
  ?-? g ?-? h, but the walks visiting more vertices are preferred because they are
  supported by more reads.

------------->
     -------------->
         --------------->

- Transitive reduction finds edges f ?-? h, described above, and removes them.
- Algorithm:  Go through each vertex and examine neighbors up to 2 steps away to
  identify all transitive edges leaving this vertex.  (Some optimizations are
  possible.)

13. Collapsing unbranched paths

Find unbranched paths and collapse them.

f >-> g >-> h >-> i >-> j >-> k

f >-< g <-> h >-< i <-< j <-> k

Ideally, most the genome will be unbranched sequence.  These sequences will be
assembled after this step of the algorithm.

But, real genomes contain repeats, and they will create branches in the graph.

14. Traversal count calculation

Estimate the traversal count of each edge.

Ideally, every edge will be traversed exactly one time.
- But, real genomes always contain repetitive sequence, and these regions may
appear multiple times in the final assembly.
- It is also possible for there to be erroneous parts of the graph that should
  not be included in the final assembly at all.

A-statistic formula

15. Minimum cost network flow

We need to determine how many times edge must be traversed.

Remember, some edges may be repeated sequence, and they therefore may appear
multiple times in the original genome.

Given the bidirected string graph with each edge labeled as OPTIONAL, EXACTLY
ONCE, or AT LEAST ONCE, compute a minimum-cost network flow that makes the graph
Eulerian.

16. Compute an Eulerian tour of the graph to produce a reconstruction of the
original genome.

A generalized Eulerian tour through the bidirected graph will produce a possible
reconstruction of the original genome.

- General case:  The original genome cannot be reconstructed in one piece, so
  the final reconstruction must take the form of the smallest set of paths that
  traverse all the edges the required number of times.

17. Implementation:

- A set of C++ programs that iteratively transform the data into the final
  assembly.
- Different sets of stages of the algorithm may be run in order to reach the
  final assembly.

Each node is a binary program.

The arrows indicate the output from one program being used in other program.


            convert-reads

                |
                V
                ...

Reads are input in textual form, e.g. the FASTA format:

>read_1
ATATTATATAT
>read_2
GCGCGTGTGTA

Genome is output in textual form.

A _contig_

>contig_1
TTTATAGTAGTAGTTGATTAGTATAGTGATGATAGTAGTA...

- Many things still would need to be improved to make this competitive with
  other assemblers.

18. References

- The Fragment String Assembly Graph (2005) by Eugene W. Myers
    * Main algorithm I have described.

- Maximum Likelihood Genome Assembly (2009) by Paul Medvedev and Michael Brudno
    * Explanation of bidirected graphs and bidirected graph algorithms applied
    * to DNA sequences.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

== A bidirected string graph model of genome assembly ==

Hi, my name is Eric and I'll be talking about genome assembly, more specifically
the way in which a special kind of graph called a bidirected string graph can be
used to model the genome assembly problem.

== Genomes ==

So first of all, what is a genome?  Biologically, a genome is the entirety of an
organism's hereditary information, which usually consists of a number of long
DNA molecules.  For our purposes we will consider a genome to be a long string
of A's, C's, G's, and T's, which correspond to the four nucleotides of DNA.

However, DNA is a dual-stranded molecule, so we must consider genomes to be
dual-stranded as well.  The way this works is that the letter A always pairs
with the letter T on the opposite strand, and the letter C always pairs with the
letter G on the opposite strand.  In addition, each strand has a direction, and
the directions of the two strands of a DNA molecule run opposite one another.

Another bit of terminology is that each letter in the genome is called a base
pair.  This term is often used even we are only talking about 1 strand, because
there almost always is an implied second strand.

With regards to the sizes of genomes in the real world, bacterial genomes tend
to be several million base pairs long, while more complicated genomes, such as
many plant and animal genomes, can be several hundred million or even several
billion base pairs long.

== Genome Sequencing ===

The goal of genome sequencing is to determine the precise sequence of an
organism's genome.

Essentially, this is very difficult to do, because DNA is an actual molecule,
and this means that each base pair is very, very small, making it almost
impossible to directly observe a DNA sequence. 

Therefore, indirect laboratory techniques must be used to sequence DNA
molecules.  However, these techinques currently have a number of limitations.
In particular, these techniques can currently only sequence short pieces of DNA
ranging from several dozen to several thousand base pairs long, depending on the
technique.  This means that in order to sequence an *entire* genome, which may
be millions of base pairs long, we need to take the DNA sample from the whole
genome, break it up into mucher small fragments, and sequence those fragments.

The final step is to use computers to reconstruct the original genome, given the
sequences of these much smaller fragments.  This final step, is called genome
assembly, and this is what I will be focusing on today.

== Reads ==

As I mentioned, laboratory techniques can currently only sequence short pieces
of DNA.  Each of these short sequences is called a read, and each read may come
from any location on the genome, from either strand.

As I mentioned earlier, the two strands of a genome run in opposite directions
from each other.  Because of this, reads from different strands will be oriented
in opposite directions.  Furthermore, if we consider 2 reads that came from
exactly the same location on the genome but from opposite strands, the reads
will contain the complement sequence from each other, but in reverse.  We say
that these two reads are reverse-complement from each other.

== Genome assembler ==

Genome assembly is done by a program called an assembler, which is a program or
algorithm that can take in a set of reads, usually 35 to 5000 bp long, and
produce as output the reconstructed genome.  Ideally, the assembler would output
the entire original genome as one continuous sequence, but in reality, this may
be impossible, so in this case the output should take the form of a set of
substrings of the original genome that are as long as possible.

== Details of assembler input ==

This slide shows in more detail exactly what the input to a genome assembler
might be.  Reads are usually provided in a plain-text format that simply lists
the sequences in plain text, separated by a name for each read.  However, even
though the input is usually in plain-text format, this does not rule out the
possibility that the assembler can represent DNA sequences in a more
space-efficient way internally.  For example, there are only 4 possible letters,
so only 2 bits are sufficient to represent each letter.

== Details of assembler output ==

An assembler is expected to generate output in a similar format to the input,
but the sequences will be contigs, which are assembled, contiguous sequences of
DNA that are believed to exist in the original genome, and each contig should be
as long as possible.

== Genome assembly vs shortest common superstring ==

I'm going to go over slide quickly, but basically it shows genome assembly is
similar to the shortest common substring problem but has some key differences.
Also, some models of genome assembly have been proven to be NP-complete, so
algorithms for genome assembly usually are heuristic algorithms that have been
shown to work well on real data.

/*
Genome assembly is somewhat similar to the shortest common superstring problem,
which is a famous problem that has been proven to be NP-complete.  The shortest
common superstring problem is to find the shortest string that contains every
member of a given set of strings as a substring.  In genome assembly, we also
would like to find a string from which a set of substrings could have been
produced.  However, genome assembly, except in an extremely simple formulation,
has some differences with the shortest common superstring problem, many of which
make genome assembly even harder than this problem, which is already
NP-complete.  Genomes are dual-stranded, which always needs to be taken into
account.  Also, the reads may contain errors, which I'm not going to discuss in
this presentation, but this should be taken into account by assembly algorithms
as well.  And finally, the original genome may contain repeated sequences,
thereby making it longer than the actual shortest common superstring.  Simply
finding the shortest common superstring will produce an incorrect assembly by
collapsing these repeats.

Overall, what we can take away from this is that genome assembly is complicated
enough to need entirely new algorithms to solve.
*/

== An algorithm for genome assembly ==

For the rest of this talk, I will be focusing on an assembly algorithm that was
published in 2005.  It provides a good overview of some of the technqiues that
are used in genome assembly, especially since it draws on ideas that have been
used earlier assemblers, such as the Celera assembler which was used for the
first assembly of the human genome.  However, this algorithm uses some new ideas
as well.

Here I've condensed the overall algorithm into three steps.  The first step is
to use overlaps between reads to build a graph that models the assembly problem.
Next, the graph needs to be simplified and analyzed.  Finally, paths through the
graph need to be found to reconstruct the original genome.

== Overlaps between the reads ===

As mentioned, the algorithm uses the idea of overlaps between reads.  If we
consider two reads, f and g, and their reverse-complements f' and g', the reads
are said to exactly overlap by some length L if and only of
	the last L base pairs of f exactly match the first L base pairs of g, or
	the last L base pairs of f exactly match the first L base pairs of g', or
	the last L base pairs of f' exactly match the first L base pairs of g, or
	the last L base pairs of f' exactly match the first L base pairs of g'

The reason there are four cases is because of the possibility of the overlaps
being reverse-complement.

An exact overlap o is fully described by the tuple f, g, f beg, g beg, len, rc,
where f and g are the overlapped reads, f beg is the position in read f of the
start of the overlapped region, g beg is the position in read g of the start of
the overlapped region, len is the length of the overlap, and rc is a boolean
that indicates whether the overlap is reverse-complement or not.

It is possible, although rare, for a read to overlap with itself.  This can
happen if the prefix of the read is the same as the suffix of the read.

== Overlaps between the reads ==

The reason that overlaps are important is that two reads that overlap are likely
to come from adjacent positions on the genome.  Here you can see two overlapping
reads and the implied possible genome.

Overlapping reads may be from different strands, in which case the overlapped
regions are reverse-complement from each other.

== Three types of overlaps ==

If we consider all the cases, there are 3 different types of overlaps.  In a
normal overlap, the two reads overlap when they are arranged in the same
direction.  In an "innie" overlap, the two reads overlap when they are arranged
pointing inwards.  And in an "outie" overlap, the two reads overlap when they
are arranged pointing outwards.

== Computing overlaps ==

Now that we've formalized the idea of an overlap, we would like to compute *all*
the pairwise overlaps of some minimum length L among all the reads that were
given to the assembler as input.

The easy way to do this is to take every read and compare it to every other read
to check for each of the three types of overlaps.  Unfortunately, this algorithm
is very naive because if there are N reads, then N squared over 2 read pairs
need to be considered, which is simply too slow if we have millions of reads.

A faster algorithm is to index the reads by short subsequences less than the
required overlap length L, then only compare reads that share a subsequence.
More specifically, each shared subsequence is called a seed, and it may be
either forward or reverse-complement.  Given two reads and a seed shared by
both, the seed can be extended on both ends to find a maximal shared subsequence
of the two reads.  If the maximal shared subsequence meets the definition of an
overlap and the same overlap was not already found, it is added to the set of
overlaps.

And finally, so far I have only been talking about exact overlaps, but it is
also possible to compute approximate overlaps, where the overlapped region may
have differences up to a certain threshold, such as 2%.  This is designed to
accomodate errors in the DNA sequencing.

== Computing overlaps ==

So as one of the first parts of my project, I implemented a program to compute
overlaps.  It takes as input a set of reads and the desired minimum overlap
length L.  It produces as output all exact pairwise overlaps of length L or
greater between reads, including self-overlaps and reverse-complement overlaps.

The algorithm used is the seed-and-extend algorithm, which makes the running
time linear with regard to genome size for non-repetitive genomes, but other
variables such as the read density and repetitiveness of the genome still can
cause the running time to rise quadratically.

== Build the fragment string assembly graph ==

So now we have a set of reads together with all the overlaps between them.  The
next step in the algorithm is to use these overlaps to build a graph that models
the different ways in which the reads can be put together when the overlaps are
used as evidence.

To do this, define a graph in which each vertex is a read, and each edge is an
overlap.  Two reads are connected by an edge if and only if they share an
overlap.  The edges are also labeled with appropriate DNA sequences based on the
overlaps.  Since each edge is labeled with a string, this makes the graph a
string graph.

Now, there's still an essential point that needs to be addressed to fully
specify the graph, and that is whether the edges are directed or undirected ---
or something else.

== Build the fragment string assembly graph (cont.) ==

Well, in order to decide what type of edges we need, we need to think about what
the edges really represent here.  An edge represents an overlap between two
reads--- but we do NOT know which strands the reads are from.  Based on an
overlap, we may know that two reads are probably from the same strand or
probably from opposite strands, but at this point in the assembly process we
cannot say in absolute terms which strand in the original genome each read is
from.

Therefore, we must allow each read to be used in either the forward or
reverse-complement direction, each of which corresponds to one of the directions
in which the edge will be traversed.  So it needs to be possible to traverse
each edge in either direction.  At the same time, it needs to be guaranteed that
an edge leaving the vertex for some read f that uses f with an implied
reverse-complement direction cannot be taken directly after an edge that arrives
at f using it with an implied forward direction, or vice versa.  Such a path
would use the read f inconsistently in the assembly, and such a path would not
actually be supported by the underlying reads.

The solution to this problem is to use a graph that has bidirected edges.

== Bidirected graph ==

A bidirected graph is a graph where a directed head is attached to both ends of
each edge.

There are 3 types of bidirected edges (or 4 if you count the two symmetrical
edges as distinct).  They follow directly from the types of overlaps.  On the
far left, on outie overlap produces a corresponding outie bidirected edge.
Center left, an innie overlap produces a corresponding innie bidirected edge.
And to the right, the normal overlaps produce bidirected edges with both arrow
heads pointed the same way.

== Walks in a bidirected graph ==

To get any farther, we also need to formalize the notion of a walk in a
bidirected graph.  A walk in a bidirected graph G is a continuous sequence of
edges in G such that if an inner vertex on the path is entered through a head
inwards, it is left on a head outwards, and vice versa.  To see what I mean by
this, consider the graph shown at the bottom of the slide, and consider the
possible walk 1 2 3 4.  To determine if this walk is valid or not, consider all
vertices of the walk except the first and last, for each such vertex, examine
the two heads adjacent to it that are used in the corresponding part of the
walk.  If those two heads are pointed in the same direction *on the walk*, or
equivalently in opposite directions *relative to the vertex they're adjacent
to*, that part of the walk is allowed.

In this graph, the red circles show two pairs of heads that each must be
consistent in order for the walk to be valid.  In this particular example, this
is a valid walk.  In addition, nothing in this definition depends on the actual
direction of the walk itself--- so 4 3 2 1 is also a valid walk.  The reverse of
a bidirected walk will always be a valid bidirected walk.

/*and consider a walk*/
/*starting at vertex 1.  Since this is the first vertex in the walk, we can walk*/
/*along any adjacent edge no matter what the directions of the two heads of the*/
/*edge are.  After we've arrived at vertex 2, note that it was entered through an*/
/*inward head.  This is referring to the head on the edge between 1 and 2 that is*/
/*directly adjacent to 2.  This inward head places a restriction on the edges we*/
/*can follow leaving 2; the walk can only be continued by following an edge that*/
/*begins with a head pointed away from vertex 2.  The edge between 2 and 3 meets*/
/*this requirement, so we can walk to 3.  Then, notice that vertex 3 was entered*/
/*through an outward head, so it can only be left through an inward head.  The*/
/*edge between 3 and 4 meets this requirement, so the walk can proceed to 4.*/

== Walking through the bidirected string graph ==

Remember that we want to make each vertex in the graph correspond to a read, and
each edge correspond to an overlap between two reads.  Given the
dual-strandedness of the DNA, the mapping to a bidirected graph works very
nicely.  A walk, as defined previously, through such a bidirected graph
represents a way in which a set of reads can be assembled together consistently.
Within any such assembly, each read may be used in either forward or
reverse-complement orientation, depending on the orientation of the arrow head
when the corresponding vertex is entered or left.

As an example, consider the graph shown, which is the same as the graph on the
previous slide.  If we do a walk 1 2 3 4, we leave vertex 1 through an inward
head, indicating that it is being used in reverse-complement orientation.  We
then pass through vertex 2 with the arrow heads in the direction of the path,
indicating it's used in a forward orientation.  Vertex 3 is passed through with
the arrow heads in the opposite direction of the path, indicating that the
corresponding read is used in the reverse-complement orientation.  Finally,
vertex 4 is entered through an outward hea
