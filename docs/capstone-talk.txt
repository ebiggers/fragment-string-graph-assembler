-------------------------------------------------------------------------------

Hi, my name is Eric, and my presentation is entitled "A Bidirected String Graph
Model of Genome Assembly".  This is based on a project I did in Discrete Applied
Mathematics.

-------------------------------------------------------------------------------

This topic is at the intersection of biology, computer science, and mathematics,
so before I can really get into any mathematics at all I need to give a short
introduction to genome sequencing and assembly.  Afterwards, I'll explain how a
special type of graph called a bidirected string graph can be applied to genome
assembly.

-------------------------------------------------------------------------------

You probably remember from a biology class that a genome is made of DNA
molecules, and a DNA molecule is made of a sequence of paired nucleotides.  Each
of these paired nucleotides is called a base pair, and there's a specific
pairing that occurs due to the chemical structure.  Consequently, given the
sequence of nucleotides on one strand of a DNA molecule, we can always
reconstruct the other strand.  Something else that is worth noting is that each
strand of a DNA molecule has a direction, and it is always opposite the
direction of the opposing strand.

-------------------------------------------------------------------------------

I'm going to be talking about genome sequencing, which is the process of
determining the sequence of base pairs in all the DNA molecules of a genome.
One reason this is a hard problem is that genomes can be extremely large.  As
illustrated by this table, they can range in size from millions of base pairs to
billions of base pairs.  Clearly we need to use computer algorithms and
mathematical models to create and process data sets this large.

-------------------------------------------------------------------------------

I'll be focusing on a technique called de novo whole genome shotgun sequencing.
This approach to genome sequencing uses currently available technology, which
can very quickly sequence huge numbers of short DNA molecules, but not small
numbers of long DNA molecules.  Therefore, to sequence an entire genome, we must
break a DNA sample into small fragments, then sequence those fragments.  This
produces a huge number of short DNA sequences, which then must be used to
computationally reconstruct the original genome, similar to putting together a
puzzle.  It's this last step I'm going to be talking about, since it is a very
computationally and mathematically hard problem.

-------------------------------------------------------------------------------

Each of these short DNA sequences is called a read, and each read may come from
any DNA molecule in the genome, from any location, on either strand.  Reads are
always oriented in the direction of the underlying strand of DNA.  Because of
this, reads from opposing strands will be oriented in opposite directions.
Furthermore, if we consider two reads that came from exactly the same location
but from opposing strands, the reads will contain the complement sequence from
each other, but in reverse.  We say that these two reads are reverse-complement
from each other.

-------------------------------------------------------------------------------

The problem of genome assembly is to take in a set of reads and produce as
output an approximation of the reconstructed genome.  Note that, depending on
the data, it might not even be possible to reconstruct the original genome
exactly, so that is why we must only require an approximation.

-------------------------------------------------------------------------------

I need to emphasize that genome assembly is a very difficult problem.  It is
comparable to the Shortest Common Supersequence problem, which probably cannot
be solved in faster than exponential time.  In addition, there are a number of
complications specific to genome assembly which I don't even have time to
consider in this talk.  However, I *will* take into account the fact that DNA is
double-stranded, and this will be key to the approach I will present.

-------------------------------------------------------------------------------

There are a number of overall algorithms that have been designed for genome
assembly.  The one I'm going to focus on was proposed by Eugene Myers in a 2005
paper.  Briefly, the first step of the algorithm uses pairwise overlaps between
reads to build a graph that models the assembly problem.  The second step
performs various mathematical simplifications and calculations on the graph.
The last step computes a possible assembly of the original genome by finding a
walk through the graph, using concepts from graph theory such as minimum cost
circulation and Eulerian cycles.

This is obviously a very complicated algorithm that consists of many different
sub-algorithms, so for this talk I will primarily just be explaining one of the
main ideas which is how we can model genome assembly using a graph.

-------------------------------------------------------------------------------

As I mentioned, the algorithm uses the idea of overlaps between reads.  Overlaps
are important because they indicate ways in which reads can potentially be
merged to form a longer sequence.  The obvious case is that when reads are
oriented in the same direction and the sequence at the end of one read matches
the sequence at the beginning of the other, then we have an overlap.  However,
we can also have overlaps when two reads are oriented in opposite directions.
In that case the sequences in the overlapping region must be reverse
complements.

-------------------------------------------------------------------------------

If we abstract a little, there really are 3 different types of overlaps: normal
overlaps, innie overlaps, and outie overlaps.

-------------------------------------------------------------------------------

I'm going to skip forward a little bit and say that given a set of reads, we've
computed all the pairwise overlaps of some minimal length among them.  Although
that by itself is a significant computational problem, for this talk I'd like to
move on to building the graph itself.

On this slide I've illustrated a very simple example that motivates the way that
we can model genome assembly using a graph.  On the left we have 3 reads f, g,
and h, as well as 3 overlaps that were computed from them.  The overlaps are
between f and g, g and h, and f and h; note that we have a normal overlap as
well as two outie overlaps.

What we want to do is build a graph that we can walk through to model the
different ways in which the reads can be assembled together when the overlaps
are used as evidence.

To do this, we define a graph with one vertex per read.  Then, for each overlap
between two reads, we create an edge between the corresponding two vertices.
This is simple enough, but there's a big problem here, and it has to do with the
fact that DNA is double stranded and any given read may be from any strand.

-------------------------------------------------------------------------------

To see what the problem is, we need consider exactly what we want the graph to
represent.  At the center-left we can see the reads laid out manually, and at
the center-right, we can see the desired assembly of the reads.  This indicates
that we want to use read f, then read g, then read h in our assembly.  However,
we want to use read h in its reverse complement orientation, and that needs to
be represented in the graph somehow.  And also, if you think about it, it makes
jense to allow skipping read g, since we still have an overlap between f and h.
However, we don't want to allow nonsensical assemblies such as g then h then f,
which would be legal if we used an undirected graph.

Finally, if we expand the example and suppose that these 3 reads are merely a
local part of some much larger assembly problem, then we have no idea which
strand we're actually assembling when we start this sequence beginning with CTT.
Consequently, we need to formulate the graph such that any walk in the graph is
also a valid walk in reverse, but the interpretation of that reverse walk
actually results in all the reads being used in the opposite orientation so that
they assemble the other strand of the DNA.

It turns out that we can solve these problems by using a special type of graph
called a bidirected graph.

-------------------------------------------------------------------------------

What distinguishes a bidirected graph from other types of graphs is that a
directed head is attached to both ends of each edge.

Consequently, there are 3 (or 4 if you ignore symmetry) types of bidirected
edges.  In our application, they result directly from the different types of
overlaps.

There is also a definition for a walk in a bidirected graph.  Although it is
somewhat peculiar, it is exactly what we need to represent a possible genome
assembly.  Specifically, a walk in a bidirected graph is a continuous sequence
of edges such that if any vertex is entered through a head inwards it is exited
through a head outwards, and vice versa.  Note that it is *not* a requirement
that a walk always proceeds in the direction of the arrow heads it passes
through.

-------------------------------------------------------------------------------

For example, if we consider the graph shown in this slide, we can walk 1 2 3 4,
or we can walk 4 3 2 1.  Both are valid because when we pass through vertices 2
and 3, the adjacent arrow heads point in the same direction relative to the
walk, regardless of whether this direction is forwards or backwards.  In this
application, any such walk represents a possible genome assembly produced by the
layout of the reads in the order that the corresponding vertices are encountered
in the walk.  Furthermore, each read may be used in either forward or reverse
complement orientation, depending on the direction of the arrow heads when the
walk passes through the corresponding vertex.

-------------------------------------------------------------------------------

This slide shows the graph built from a slightly larger data set.  This was
simulated data consisting of 11 100 bp reads from a random 450 bp genome.  Do
note that real genomes are thousands of times larger than this, which is why
I've labeled this an "extremely small example".

Our task is to find a walk through this graph to figure out how to lay out our
reads to produce a genome assembly.

Although it looks a little difficult, actually there are some simplifications,
which I don't have time to explain in detail, which we can perform on the graph
before trying to find a walk.

-------------------------------------------------------------------------------

This slide shows the graph after doing one type of simplification ...

-------------------------------------------------------------------------------

... and this slide shows the graph after doing another type of simplification.
So our task is now to find a walk through this graph, which is trivial; we just
go from one vertex to the other, and this essentially produces the original
genome.

-------------------------------------------------------------------------------

Now, the question is, will it always be that easy, and of course the answer is
no.  The graph shown here is *already* simplified, so it's the equivalent of the
two vertex graph I just showed you.  However, I made it from 1000bp reads
randomly sampled from the E. coli genome, which is a real genome that is 4.6
million base pairs in length.  Despite the complexity of the graph, this *is*
still a "small" example; it's 700 times smaller than the human genome.  But, in
any case, the reason that the graph is so complicated is that some sequences in
the genome are too repetitive to be disambiguated even with our 1000 bp reads.
Consequently, we get branches in our graph, and now the problem is to compute a
way to walk through this graph that produces a likely assembly of the genome.

-------------------------------------------------------------------------------

I'm nearing the end of my allocated time, so for people who are interested and
have had some more graph theory background I'll just briefly mention how we
might go about doing that.  Basically, we could try to find a walk that uses
every read, which would be like a Hamiltonian path, or we can try to find a walk
that uses every overlap, which would be like an Eulerian path.  It's very much
preferable to choose the Eulerian approach because, in general, finding an
Eulerian path takes linear time whereas finding a Hamiltonian path takes
exponential time.  However, it's certainly not as simple as that, because first
of all there is no guarantee the graph is even Eulerian, and we also don't
necessary want to traverse every edge exactly once, due to the possibilities of
repeats and spurious overlaps.  Therefore, we can essentially do some
statistical analysis, then solve a minimum cost circulation problem, and finally
find a generalized Eulerian path on the bidirected graph.

-------------------------------------------------------------------------------

To summarize what I actually did, this diagram shows the dataflow among the C++
programs that I wrote to implement this algorithm.  Briefly, from the reads, we
compute overlaps, build a bidirected graph, run various simplifications and
calculations on the graph, and produce the final assembly by walking through the
graph.  Note that there are important steps which I did not have time to talk
about.

-------------------------------------------------------------------------------

I'd like to acknowledge Andrew Beveridge and Stan Wagon for advising me on the
project, and also the main papers that I borrowed ideas from.  And also, I
didn't talk about this it all, but during the summer of 2012 I worked with
Michael Schatz at Cold Spring Harbor Laboratory on assembling the genome of the
domesticated pineapple plant, which is where I first became interested in genome
assembly.

-------------------------------------------------------------------------------
