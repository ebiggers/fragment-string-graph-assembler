1. Genomes

- A genome (for our purposes) is a long string of A's, C's, G's, and T's
- Dual-stranded
	- A pairs with T and C pairs with G
- E. coli (a common bacterium): ~4,600,000 base pairs
- Ananas comosus (pineapple):	~500,000,000 base pairs
- Homo sapiens (human):			~3,000,000,000 base pairs

2. Genome sequencing

- How can we find the precise sequence (in terms of A's, T's, C's, and G's) of
  an organism's genome?

- Currently available sequencing technologies can only sequence fragments a few
  dozen to a few thousand bp long

- Genome assembly:
	Lab work:
		1. Obtain a DNA sample
		2. Break DNA into much smaller fragments
		3. Sequence the fragments using available technology
	Computational work:
		4. Given the sequenced fragments, reconstruct the original genome.

3. Reads

- A _read_ is a short sequence of the letters A, C, T, G that represents some
  DNA that was sequenced by the sequencing machine.
- A read may come from any location on the genome, from either strand.
- Reads from opposite strands go in opposite directions.
	- As a result, a sequence and its reverse-complement (the corresponding
	  sequence on the other strand, going backwards) are usually considered
	  equivalent.

4. Genome assemblers

Input:  A set of reads (lengths: ~35 to 5000bp each).
Output:  One strand of the reconstructed genome (if possible)--- but in general,
an exact answer may be impossible, so the output must be a set of substrings of
the original genome that are as long as possible. (lengths: ~10,000 to
10,000,000bp each).

5. Comparing genome assembly to Shortest Common Superstring

Genome assembly is superficially similar to the shortest common superstring
(SCS) problem, which is to find the shortest string that contains all strings
from a given set.

Venn diagram

Shortest Common Superstring				Both				Genome assembly

                                Given shorter strings,
                                put them together to
                                make a longer string.


Substrings are exact                                  Substrings (reads) may contain errors

NP-complete                                            Some models proven to be NP-complete

Substrings must appear exactly in superstring       Substrings (reads) may come
                                                        from either one of two strands

Superstring found must be shortest possible             The true genome may be longer
                                                        than the shortest
                                                        common superstring.

6. Ideas for genome assembly algorithms

- Use the reads to build a graph that models the assembly problem.
- Find paths through the graph to reconstruct the original sequence.

7. Overlaps between reads

- Two reads that overlap are likely to come from adjacent positions on the
  genome.

----------------->
       -------------------->

            =?=

--------------------------->

- Overlapped reads may be from different strands.  Note the different directions
  of the two reads here.  The overlapped regions of the two reads are
  reverse-complement from each other.

<------------------   
        ----------------------->

            =?=

------------------------------->

8. Computing overlaps between reads

- Compute all pairwise overlaps of some minimum length l among the reads.
- Naive algorithm compares every read with every other read.
- A faster algorithm indexes the reads by short subsequences, then only compares
  reads that share a subsequence ("seed-and-extend").

9. Build the fragment string assembly graph

- Use the overlaps as evidence to construct a graph modeling the assembly.
- Each vertex represents a read.
- Each edge represents an overlap.
- Two reads are connected with an edge if they share an overlap.
- Each edge is labeled with DNA sequence of the _non-overlapped region_ (this
  should become clearer later...).  This is why it's called a _string graph_

- Should the edges be directed or undirected?

10. Bidirected graphs

- At this stage, we don't actually know which strands the reads are from!

------------>            or             <------------
     <-------------             -------------->

- We must allow the edges to be traversed in either the forward or
  reverse-complement direction... but each read MUST be used in a consistent way
  in the reconstruction.

- A _bidirected graph_ is a graph where a directed head is attached to both
  edges.

- There are 3 (or 4, ignoring symmetry) types of bidirected edges.  They follow
  directly from the different types of overlaps.

     ------->   ------>      ------>     <------
  <-------         <-------     ------>     <------

      |               |           |          |
      V               V           V          V  

  <--------->   >---------<  >-------->  <--------<

- In this example, two vertices (reads) may have multiple _bidirected edges_
  between them if they overlap in different ways, but there can be at most one
  _bidirected edge of the same type_ between two vertices if we always prefer
  the best overlap of a given type.

11. Walking through the bidirected string graph

- A _walk on a bidirected graph_ is a continuous sequence of edges such that
  if we enter a vertex v through a head inwards, we leave it on a head outwords,
  and vice versa.

- A bidirected edge may be traversed in opposite directions.

- The reverse of a walk in a directed graph is also a bidirected walk.

    - Interpretation: one direction of the walk spells out the _forward_
      sequence.  The other direction spells out the _reverse complement_
      sequence.

12. Transitive reduction

- Very commonly, given three adjacent reads f, g, and h, f will overlap h as
  well as g.  This is redundant information because we can equivalently walk f
  ?-? g ?-? h, but the walks visiting more vertices are preferred because they are
  supported by more reads.

------------->
     -------------->
         --------------->

- Transitive reduction finds edges f ?-? h, described above, and removes them.
- Algorithm:  Go through each vertex and examine neighbors up to 2 steps away to
  identify all transitive edges leaving this vertex.  (Some optimizations are
  possible.)

13. Collapsing unbranched paths

Find unbranched paths and collapse them.

f >-> g >-> h >-> i >-> j >-> k

f >-< g <-> h >-< i <-< j <-> k

Ideally, most the genome will be unbranched sequence.  These sequences will be
assembled after this step of the algorithm.

But, real genomes contain repeats, and they will create branches in the graph.

14. Traversal count calculation

Estimate the traversal count of each edge.

Ideally, every edge will be traversed exactly one time.
- But, real genomes always contain repetitive sequence, and these regions may
appear multiple times in the final assembly.
- It is also possible for there to be erroneous parts of the graph that should
  not be included in the final assembly at all.

A-statistic formula

15. Minimum cost network flow

We need to determine how many times edge must be traversed.

Remember, some edges may be repeated sequence, and they therefore may appear
multiple times in the original genome.

Given the bidirected string graph with each edge labeled as OPTIONAL, EXACTLY
ONCE, or AT LEAST ONCE, compute a minimum-cost network flow that makes the graph
Eulerian.

16. Compute an Eulerian tour of the graph to produce a reconstruction of the
original genome.

A generalized Eulerian tour through the bidirected graph will produce a possible
reconstruction of the original genome.

- General case:  The original genome cannot be reconstructed in one piece, so
  the final reconstruction must take the form of the smallest set of paths that
  traverse all the edges the required number of times.

17. Implementation:

- A set of C++ programs that iteratively transform the data into the final
  assembly.
- Different sets of stages of the algorithm may be run in order to reach the
  final assembly.

Each node is a binary program.

The arrows indicate the output from one program being used in other program.


            convert-reads

                |
                V
                ...

Reads are input in textual form, e.g. the FASTA format:

>read_1
ATATTATATAT
>read_2
GCGCGTGTGTA

Genome is output in textual form.

A _contig_

>contig_1
TTTATAGTAGTAGTTGATTAGTATAGTGATGATAGTAGTA...

- Many things still would need to be improved to make this competitive with
  other assemblers.

18. References

- The Fragment String Assembly Graph (2005) by Eugene W. Myers
    * Main algorithm I have described.

- Maximum Likelihood Genome Assembly (2009) by Paul Medvedev and Michael Brudno
    * Explanation of bidirected graphs and bidirected graph algorithms applied
    * to DNA sequences.
